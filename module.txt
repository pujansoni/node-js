Node js module:
Conditionally load a module: require behaves just like any other function in JavaScript. It has no special properties. This means that you can 
choose to call it based on some condition and therefore load the module only if you need it.
Blocking: The require function blocks further code execution until the module has been loaded. This means that the code 
following the require call is not executed until the module has been loaded and executed. This allows you to avoid 
providing an unnecessary callback like you need to do for all async I/O in Node.js
Cached: Reading something from the file system is an order of magnitude slower than reading it 
from RAM. Hence, after the first time a require call is made to a particular file, the module.exports is cached. The 
next time a call is made to require that resolves to the same file (in other words, it does not matter what the original 
relative file path passed to the require call is as long as the destination file is the same), the module.exports variable 
of the destination file is returned from memory, keeping things fast.

Best practices in module:
Do not use the .js extension - 
    It is better to do require('./foo') instead of require('./foo.js') even though both work fine for Node.js.
Reason: For browser-based module systems (such as RequireJS, which we look at later in this chapter), it is 
assumed that you do not provide the .js extension since we cannot look at the server filesystem to see what you 
meant. For the sake of consistency, avoid adding the .js extension in all your require calls.
Relative Paths - 
    When using file-based modules, you need to use relative paths (in other words, do require('./foo') instead of 
require('foo')). Reason: Non-relative paths are reserved for core modules and node_modules. We discuss core modules in this 
chapter and node_modules in the next chapter.
Utilize exports - 
    Try and use the exports alias when you want to export more than one thing.
Reason: It keeps what is exported close to its definition. It is also conventional to have a local variable for each 
thing you export so that you can easily use it locally. Do this all in a single line, as shown below:
var foo = exports.foo = /* whatever you want to export as `foo` from this module */ ;
Export an Entire Folder -
    If you have too many modules that go together that you keep importing into other files, try to avoid repeating the 
import as shown below:
ex:
    var foo = require('../something/foo');
    var bar = require('../something/bar');
    var bas = require('../something/bas');
    var qux = require('../something/qux');
Instead, create a single index.js in the something folder. In index.js, import all the modules once and then 
export them from this module, as shown below:
ex: index.js
    exports.foo = require('./foo');
    exports.bar = require('./bar');
    exports.bas = require('./bas');
    exports.qux = require('./qux');
Now you can simply import this index.js whenever you need all these things:
var something = require('../something/index');
Reason: It is more maintainable. On the export side, individual modules (individual files) remain smallerâ€”you 
do not need to put everything into a single file just so you can import it easily elsewhere. You just need to create an 
index.js file. On the import side, you have fewer require calls to write (and maintain).
